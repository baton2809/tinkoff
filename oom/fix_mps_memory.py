"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é MPS –Ω–∞ Apple Silicon
"""

import os
import torch
import psutil
import gc

def check_system_memory():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    print("=== –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–º—è—Ç–∏ ===")
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
    memory = psutil.virtual_memory()
    print(f"–û–±—â–∞—è –ø–∞–º—è—Ç—å: {memory.total / (1024**3):.1f} GB")
    print(f"–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: {memory.available / (1024**3):.1f} GB")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {memory.percent}%")
    print(f"–°–≤–æ–±–æ–¥–Ω–æ: {memory.free / (1024**3):.1f} GB")
    
    # MPS –ø–∞–º—è—Ç—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    if torch.mps.is_available():
        print(f"\n=== MPS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ===")
        print(f"MPS –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.mps.is_available()}")
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ MPS
            torch.mps.empty_cache()
            print("‚úì MPS –∫—ç—à –æ—á–∏—â–µ–Ω")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å MPS: {e}")

def apply_memory_fixes():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
    print("\n=== –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–∞–º—è—Ç–∏ ===")
    
    # 1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PyTorch MPS
    fixes_applied = []
    
    # –í–∫–ª—é—á–∏—Ç—å fallback –Ω–∞ CPU –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö MPS
    if 'PYTORCH_ENABLE_MPS_FALLBACK' not in os.environ:
        os.environ['PYTORCH_ENABLE_MPS_FALLBACK'] = '1'
        fixes_applied.append("PYTORCH_ENABLE_MPS_FALLBACK=1")
    
    # –û—Ç–∫–ª—é—á–∏—Ç—å –≤–µ—Ä—Ö–Ω–∏–π –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ MPS (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
    # os.environ['PYTORCH_MPS_HIGH_WATERMARK_RATIO'] = '0.0'
    # fixes_applied.append("PYTORCH_MPS_HIGH_WATERMARK_RATIO=0.0")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    if 'OMP_NUM_THREADS' not in os.environ:
        os.environ['OMP_NUM_THREADS'] = '1'
        fixes_applied.append("OMP_NUM_THREADS=1")
    
    if 'MKL_NUM_THREADS' not in os.environ:
        os.environ['MKL_NUM_THREADS'] = '1'
        fixes_applied.append("MKL_NUM_THREADS=1")
    
    # 2. –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    gc.collect()
    if torch.mps.is_available():
        torch.mps.empty_cache()
    
    print("‚úì –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    for fix in fixes_applied:
        print(f"  - {fix}")
    
    return fixes_applied

def test_memory_allocation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–∞ MPS"""
    print("\n=== –¢–µ—Å—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ ===")
    
    if not torch.mps.is_available():
        print("‚ùå MPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    try:
        # –¢–µ—Å—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ç–µ–Ω–∑–æ—Ä–æ–º
        device = torch.device("mps")
        test_tensor = torch.randn(100, 100, device=device)
        print("‚úì –ù–µ–±–æ–ª—å—à–æ–π —Ç–µ–Ω–∑–æ—Ä (100x100) —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç —Å –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–º —Ç–µ–Ω–∑–æ—Ä–æ–º
        test_tensor2 = torch.randn(1000, 1000, device=device)
        print("‚úì –°—Ä–µ–¥–Ω–∏–π —Ç–µ–Ω–∑–æ—Ä (1000x1000) —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –û—á–∏—Å—Ç–∫–∞
        del test_tensor, test_tensor2
        torch.mps.empty_cache()
        print("‚úì –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
        
        return True
        
    except RuntimeError as e:
        if "MPS backend out of memory" in str(e):
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø–∞–º—è—Ç–∏ MPS –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
            return False
        else:
            print(f"‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ MPS: {e}")
            return False

def recommend_solutions():
    """–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é"""
    print("\n=== –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º ===")
    
    memory = psutil.virtual_memory()
    available_gb = memory.available / (1024**3)
    
    print("1. –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
    print("   - –ó–∞–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –¥—Ä—É–≥–∏–µ —Ç—è–∂–µ–ª—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Python/Jupyter –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: train_reward_model_optimized.py")
    
    print("\n2. –ü–ê–†–ê–ú–ï–¢–†–´ –û–ë–£–ß–ï–ù–ò–Ø:")
    print("   - –£–º–µ–Ω—å—à–∏—Ç–µ max_samples –¥–æ 100-500")
    print("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ batch_size=1")
    print("   - –£–º–µ–Ω—å—à–∏—Ç–µ max_length –¥–æ 64-128")
    print("   - –û—Ç–∫–ª—é—á–∏—Ç–µ gradient_checkpointing")
    
    print("\n3. –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print("   export PYTORCH_ENABLE_MPS_FALLBACK=1")
    print("   export OMP_NUM_THREADS=1")
    print("   export MKL_NUM_THREADS=1")
    
    if available_gb < 8:
        print("\n‚ö† –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ú–ê–õ–û –ü–ê–ú–Ø–¢–ò!")
        print("4. –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´:")
        print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CPU –≤–º–µ—Å—Ç–æ MPS")
        print("   - –û–±—É—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å —á–∞—Å—Ç—è–º–∏")
        print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (Colab, Kaggle)")
    
    print("\n5. –≠–ö–°–¢–†–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï:")
    print("   –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Å–∫—Ä–∏–ø—Ç–∞:")
    print("   os.environ['PYTORCH_MPS_HIGH_WATERMARK_RATIO'] = '0.0'")
    print("   ‚ö† –í–ù–ò–ú–ê–ù–ò–ï: –ú–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∑–∞–≤–∏—Å–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã!")

def create_cpu_fallback_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ CPU"""
    cpu_script = """
# –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
import os
os.environ['PYTORCH_ENABLE_MPS_FALLBACK'] = '1'
# –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∏—Ç—å MPS:
# os.environ['PYTORCH_MPS_DISABLE'] = '1'

import torch
# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU
torch.set_default_device('cpu')
"""
    
    with open('cpu_fallback_setup.py', 'w', encoding='utf-8') as f:
        f.write(cpu_script)
    
    print("\n‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª cpu_fallback_setup.py")
    print("  –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –Ω–∞—á–∞–ª–µ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é MPS\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏
    check_system_memory()
    
    # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    apply_memory_fixes()
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    mps_works = test_memory_allocation()
    
    # 4. –î–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommend_solutions()
    
    # 5. –°–æ–∑–¥–∞–µ–º fallback —Å–∫—Ä–∏–ø—Ç
    create_cpu_fallback_script()
    
    print("\n=== –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
    if mps_works:
        print("‚úÖ MPS —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ train_reward_model_optimized.py")
        print("   —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ max_samples=500, batch_size=1")
    else:
        print("‚ùå MPS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
        print("   1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ cpu_fallback_setup.py)")
        print("   2. –ò–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å PYTORCH_MPS_HIGH_WATERMARK_RATIO=0.0")
        print("   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã")

if __name__ == "__main__":
    main()
