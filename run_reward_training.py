"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è Reward Model
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚Üí –æ–±—É—á–µ–Ω–∏–µ ‚Üí —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def run_command(command, description):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
    """
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print()
    
    start_time = time.time()
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=False)
        elapsed = time.time() - start_time
        print(f"\n‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
        return True
    except subprocess.CalledProcessError as e:
        elapsed = time.time() - start_time
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ {description} –ø–æ—Å–ª–µ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        return False

def check_requirements():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    required_files = [
        "requirements.txt",
        "load_dataset.py", 
        "train_reward_model.py",
        "test_reward_model.py"
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 8):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    
    print("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def install_requirements():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    """
    if not os.path.exists("requirements.txt"):
        print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return run_command(
        "pip install -r requirements.txt",
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    )

def prepare_dataset():
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    if os.path.exists("processed_dataset") and os.path.exists("processed_dataset/metadata.json"):
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É")
        return True
    
    return run_command(
        "python load_dataset.py",
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ HelpSteer2_binarized"
    )

def train_reward_model():
    """
    –û–±—É—á–∞–µ—Ç reward model
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    if os.path.exists("reward_model_output") and os.path.exists("reward_model_output/config.json"):
        print("‚ö†Ô∏è  –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ reward_model_output/")
        response = input("–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å? (y/N): ").strip().lower()
        if response not in ['y', 'yes', '–¥–∞']:
            print("‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å")
            return True
    
    return run_command(
        "python train_reward_model.py",
        "–û–±—É—á–µ–Ω–∏–µ Reward Model"
    )

def test_reward_model():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é reward model
    """
    return run_command(
        "python test_reward_model.py",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π Reward Model"
    )

def show_summary():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    print(f"\n{'='*60}")
    print("üéâ –û–ë–£–ß–ï–ù–ò–ï REWARD MODEL –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"{'='*60}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if os.path.exists("reward_model_output"):
        model_files = list(Path("reward_model_output").glob("*"))
        print(f"üìÅ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: reward_model_output/")
        print(f"üìä –§–∞–π–ª–æ–≤ –≤ –º–æ–¥–µ–ª–∏: {len(model_files)}")
    
    if os.path.exists("processed_dataset"):
        print(f"üìÅ –î–∞—Ç–∞—Å–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤: processed_dataset/")
    
    print(f"\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README_reward_model.md")
    print(f"üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: python test_reward_model.py")
    print(f"üîß –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ train_reward_model.py")
    
    print(f"\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print(f"   1. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—à–µ")
    print(f"   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RewardModelEvaluator –¥–ª—è —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á")
    print(f"   3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ reward model –≤ RLHF –ø–∞–π–ø–ª–∞–π–Ω")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–£–ß–ï–ù–ò–ï REWARD MODEL")
    print("–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: SmolLM2-135M-Instruct")
    print("–î–∞—Ç–∞—Å–µ—Ç: HelpSteer2_binarized")
    print("Trainer: RewardTrainer (TRL)")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_requirements():
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return False
    
    # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    install_deps = input("\nüîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏? (y/N): ").strip().lower()
    if install_deps in ['y', 'yes', '–¥–∞']:
        if not install_requirements():
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return False
    
    # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    if not prepare_dataset():
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        return False
    
    # 4. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if not train_reward_model():
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
        return False
    
    # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if not test_reward_model():
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
        return False
    
    # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    show_summary()
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print(f"\nüéØ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            exit(0)
        else:
            print(f"\nüí• –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            exit(1)
            
    except KeyboardInterrupt:
        print(f"\n\n‚èπÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        exit(1)
